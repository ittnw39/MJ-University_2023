0522 절차프

설계

ea

다이어그램도 언어. - 2차원의 도형을 가지고 그리는 언어이다. 의미가 있고 일정한 규칙이 있으면 언어이다.

글자에 규칙이 있고 다이어그램에 규칙이 있을 수 있다.

모델링 언어.

다이어그램을 가지고 모델링하는 것임.

1. 클래스 다이어그램
2. 유즈 케이스 다이어그램

시나리오는 액티비티 다이어 그램

리버스 엔지니어링

모델링을 할때는 여러 가지 관점에서 하는 것이다.

건축 - 윗면, 측면, ... 따로 그림 - 한꺼번에하면 복잡하다.

다시 혼합해서 3차원으로..

요구사항은 정적 구조가 아니라 행위적 구조. 유즈케이스 다이어그램을 쓴다.

유즈케이스는 기능적 요구사항

구현하기 전에 설계하는 것이 중요

요구사항이란 고객이 무슨 시스템을 원하는 것인가

시스템 내부에서 데이터를 주고받는 것은 액터

외부에 우리 시시ㅡ템과 연결된 것이 액터


--

문장은 순서를 알 수 없다.

동시에 갈 수 있는 길 여러 개를 다이어그램으로 알 수 있다.

문장은 여러개의 길을 표현할 수 없고 순차적으로 표현할 수 밖에 없다.

그래서 다이어그램으로 하면 업무의 흐름, 구조를 알 수 있다.

애자일 프로세스 - 조금ㅆ식 수정해나가면서 개발하는 것.

컨트롤 플로우를 중심으로 그림을 그린다.

데이터 플로우 다이어그램과 컨트롤과 이벤트 플로우는 완전히 다르다.

우리의 프로그램은 컨트롤 플로우.

프로그램의 순서를 고정시켜놓고 사용자에게 물어보는 것이다.

프로그램이 사용자에게 물어본다.

이벤트는 모두 거꾸로. 사용자에게 물어보지 않고 사용자가 직접 이벤트로 순서를 결정하는 것이다.

컨트롤 플로우 프로그램은 프로그램이 흐름의 주도권을 가지고 결정한다.

두 플로우는 행위의 흐름을 결정하는 주체가 다르다.

액티비티 다이어그램은 컨트롤 플로우 다이어그램.

이벤트 프로그램은 다른 다이어그램을 쓴다.

액티비티는 여러개의 액션이 모인 것이다. 액션의 집합

컨트롤 플로우 - 시피유가 프로그램을 실행하는 순서를 제어.

프로그램의 순서를 정하는 것.

절차는 프로그램의 순서를 정하는 것.

일을 하는 것과 컨트롤 플로우 구분을 하기 어려움 - 모호성 -  구별하는 법 : 데이터와 컨트롤 플로우 - 작업에 관한 순서, 제어

컨텍스트가 다른 것을 구분하지 못한다. 특정 단어를 써서 제어한다. 문맥이 바뀌었다는 것을 알려줄 수 있다.

컨텍스트를 스위칭 

명령어 - 데이터가 아니라 제어

a = b <- 데이터 변형
if, while, for, switch <- 데이터를 변형하는 순서를 정함.

제어는 프로그램의 순서를 결정하는 것이다.



---- 과제

다이어그램 완성하기 - 유즈 케이스 시나리오 액티비티 다이어 그램으로 구현하기 