0327 절차프

리팩토링
예외 처리 exception handing

내용인지 제어 내용인지 차이가 나지 않는다는 문제가 있다.

직접적 메세지인지 그 메세지를 제어하는 메세지인지 다른것이다.

똑같은 글자가 가는데 숫자 1과 뒤로가기는 전혀 다르다. 숫자1은 모니터에 찍어야할 내용이고 뒤로가기는 모니터의 커서의 위칠ㄹ 제어하는 제어문이다.

제어문과 내용운 다룬 것이다.

if 는 계산하는 문장의 흐름을 바꿔주는 문장이다. 계산식과 if문은 전혀다르다.

어떤 일을 수행하는데에 있어서 문제가 발생하면 문제 해결 후 다시 돌아가는지 그만둬야하는지를 판단한다.

프로그램이 돌아가다 에러 발생 - 익셉션, 원래하던일하고 관계가 없다. 프로그램 내에서 같이 취급을 하면 제어문과 메세지가 혼용된다.

미디어가 달라야한다.

작업 프로그램에서도 계산과 예외를 다르게 만들어놓았다.

read라는 함수에서, 에러가 나면, 바이오 익셉션이 전달되어 처리하도록 되어있다.

익셉션이 발생하면 받는 명령문이 try catch이다. 에러가 나면 캐치 부분을 처리하라는 뜻이다.

eprint가 에러의 위치를 찍어주는 것이다.

자기가 처리하던가 자기를 호출한 함수에게 밀어버린다.(위로 던진다.)

우리가 프로그램을 짜면 우리가 예외 처리를 직접 짜야한다.

전부 예외처리를 밀어버리면 좋지 않다.

메인 함수는 언제나 필요하다. -  메인 클래스를 하나 더 만들어서 클래스를 옮긴다.

<<<<<<과제는 익셉션처리와 사칙연산. 숫자만 입력받도록. 플러쉬 시키는 것이 과제, 오퍼에이터가 사칙연산이 아니면 다시입력하라는 에러뜨도록, 에러발생하면 다시시작하거나 종료하기.>>>>>>

챗지피티는 틀린지를 모르기 떄문에 모두 믿으면 안된다. 


----

인풋 벨리데이션 - 제대로된 인풋이 들어왔는지 확인.
관심사를 완전히 잘 분리해야한다. - 세퍼레이션 컨션
되도록 정상적인 컴퓨테이션과 컨트롤과 분리되도록 프로그램을 짜는 것이 중요하다.
계산기안에서 예외처리를 하는 것이 좋다. 독립적으로 처리할 수 있어야 코드가 재사용하기 쉬워진다.

에러를 위로 밀어버리면 다른 사람이 내 코드를 보고 뭐가 에러인지 모른다. 에러는 안에 처리해야한다.
----

계산기

처음에 오퍼레이터를 읽어온다.
리드 인트 함수를 만들어서 아스키를 인티저로 바꾸기
----
리팩토링 - 코드를 정리정돈한다. 주기적으로 해야한다.
----

과제
- 익셉션 핸들링.
- 반복 계산할 수 있게 만들기.
- 프리픽스로 계산기만들기. 프리픽스 로테이션
----
중간고사는 우리가 짠 코드로 ui써서 계산기만들기