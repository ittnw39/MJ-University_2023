0308

컴퓨터 구조와 소프트웨어 플랫봄 os 버츄얼 머신

공학 보고서는 정의된 사실을 써야한다.

컴퓨터는 명령어를 실행한다. 컴퓨터는 계산기라고 정의하지만 계산을 담당하는 주체는 cpu.

cpu가 우리가 만든 프로그램의 명령어를 실행한다.

계산은 수학의 산수 영역. 수와 연산자(오퍼레이터) 연산자는 수를 논리적인 규칙에 의해서 수를 다른 숫자로 변형(매핑)하는 것이다.

여러개의 계산 규칙을 가지고 있고 그 흐름을 우리가 바꿀 수 있는 명령어를 가지고 있다. 선택, 반복의 개념. 단순 계산이 아니라 계산으로 의사결정을 할 수 있는 명령어가 포한되어 있다.

시피유는 계산도 하지만 제어를 한다.

산술 연산자로 관계 유닛을 할 수 있고, 시피유에는 없다.

제어 유닛은 프로그램의 흐름을 바꿀 수 있다. 선택을 할 수 있도록하는 유닛이 있다.

---

프로그램은 셋업의 구조이다. 시피유에 명령을 준다.

시피유는 메모리랑만 소통한다. 다른 것과는 직접 소통못하고 메모리를 통해서만 소통할 수 있다.

메모리 위에 프로그램이 있어야 시피유가 실행할 수 있다.

메모리 옆에 직접적, 지속적 저장장치(비휘발성 저장장치)-하드디스크, 파일,.. 등이 있다.

파일시스템이 저장장치를 관리하고 있다.(소프트웨어, 오에스의 일부)

파일은 크게 두종류가 있다. 파일은 저장된 독립적 단위이다.

하나는 프로그램 파일, 하나는 데이터 파일이다.

프로그램은 시피유 구조의 집합이고 실행되는 것이다. 프로그램은 실행되는 단위이고, 시피유가 프로그램을 실행한다.

데이터는 프로그램을 실행한 후 만들어지는 결과이다. 발표 자료는 데이터 파일이다. 프로그램 파일과는 다르다.

데이터 파일에 데이터를 만든 프로그램을 연결한다. 파워포인트가 실행되고 내 데이터 파일을 읽어온다.

누가 만들었는지 알 수 없으면 열 수 없다.

우리가 다루는 것은 프로그램 파일이다.

프로그램은 기계어로 번역되어 실행 가능한 형태로 하드디스크에 저장되어있다.

프로그램이 메모리로 올라온다. 하드디스크에서 메모리에 올라왔다는 것은 시피유가 실행하고 있는 것이다. 이러한 과정은 프로세스라고 한다.

프로세스의 명령어를 시피유가 실행하면서 프로그램을 할 수 있다.

컨트롤 알트 딜리트 = 프로세스 띄워줌, 시피유의 점유율을 보여준다. 시피유가 짧은 시간동안 오고가며 계속 실행하고 있다. 너무 빨라서 동시에 하고 있는 것처럼 보인다. 

프로세스는 실행중인 프로그램이다.

프로그램이 실행되면서 데이터를 쓰고 지울 때가 있다. 아닐 때는 0으로 뜬다.

시피유가 메모리의 프로그램을 실행하고 꺼지면 하드디스크로 다시 돌아간다.

메모리는 휘발성이다. 실행할 때만 올라오고 지속적이지 않다.

메모리의 저장장치의 경계가 지금 무너지고 있다. 전원을 꺼도 메모리가 그대로 남아있다. 전형적인 대용량 컴퓨터와는 다르다. 스마트폰 등 소형기기와는 관계가 없다.

시스템 버스는 용량과 관련 있다. 64bit

시스템 버스에는 데이터 버스, 주소 버스, 제어 버스가 있다.

컨트롤 명령을 값을 쏴야하는 주소를 얘기해준다. 그것이 주소버스를 통해서 가고 값이 데이터 버스를 통해서 간다.

----------------

OS - 오퍼레이팅 시스템

= 리소스 매니저
유저 프로세스

오에스는 프로그램을 실행하는데 필요한 제반을 제공해준다. 유저 프로세스를 위한 것.
간단한 하드웨어 시스템은 오에스가 필요하지 않다. 

여러개의 유저가 들어가는 순간 하드웨어는 쓸 수 없고 이를 관리해주는 관리자가 필요하다. 유저 프로세스의 실행을 관리해준다.

리소스는 하드웨어 디바이스이다. 

하드웨어 디바이스를 쓸 수 있게 해주는 유틸리티가 있다. 대표적으로 프로세스 매니저가 있다.

ex) 프로세스 매니저, 메모리 매니저, 파일 시스템 매니저, IO 디바이스

----------------

프로그램이 실행되는 프로세스의 환경


[유저 프로세스] - os에 실행 명령 내림. 
[오에스]  - 오에스가 유저 프로세스 실행(하드웨어)에 관여한다. 어떤 명령어들은 시피유 명령어를 직접 전달하기도 한다.
[하드웨어] -  

 유저 프로세스(자바 버츄얼 머신)
번역기 - 번역기
윈도우즈 - 애플 데스크탑
피시 - 맥

ㄴ 유저 프로세스를 만들 때 명령어가 같을 수가 없다. 같은 프로그램인데 명령어가 다르기때문에 따로 프로그램을 짜야한다.
    하나로 짜서 사용하는 방법을 고민했고, 나에게 서비스를 제공하는 시스템(플랫폼, 한 방향, 내 프로그램이 오에스를 쓰는 것이다.)이 있는데, 플랫폼 독립성을 유지하고 싶다.

플랫폼 독립성을 유지하기 위해 번역기를 달고 중립적 언어를 만든다.
= 자바 버츄얼 머신
= 버츄얼 머신을 미리 깔아놓고 운영체제에 따라 번역한다.
 플랫폼 독립성을 유지하기 위해서 자바가 있고, 
자바가 자기 자신의 기계어를 만들었다. = 바이트 코드

자바 버츄얼 머신의 기계어는 어디서든 똑같다. 자바는 프로그램을 하나 짜면 다 돌아간다. 안드로이드 등.
 
플랫폼(오에스, 하드웨어) 독립성을 유지하기 위해 자바 버츄얼 머신이 만들어졌다.

자바가 매우 많이 쓰이게 되고, 원래 오픈 소스, 오라클이 인수해서 유료화시킴.

나에게 일방적으로 서비스를 제공하면 플랫폼이다. 버츄얼 머신도 일종의 플랫폼이다.

jdk를 깔면 자바 버츄얼 머신(jvm)이 있다.

--------------

유저 프로세스는 기계어로 만들어져 있다. 윈도우즈 피시, 맥 용, 자바 버츄얼 머신 용으로 만들어쓴다.
자바 버츄얼 머신은 전기 신호로 구성되어 있다.
컴퓨터가 한글이나 알파벳을 알고 있는 이유는 세계 각국의 언어를 고유 숫자로 대응시켜놨다.
아스키코드 -> 유니코드

몇백만개의 언어를 만들기위해 자릿수를 늘렸다.
점점 감성적으로 변하는 것이 아니라 경우의 수를 더 많이 처리하게 될 수 있어진 것이다.

코드를 프로그램을 짜면 0101로 바꾼다(전기신호). 전기의 단계가 모호하면 안되기 때문에 0과 1로 만들어 놓은 것이다.
얼마나 빠르고 세밀하게 데이터를 처리하느냐의 문제이다.

유저 프로그램이 유저 프로세스를 만들어 낼때 컴파일러나 편집기가 개입을 한다.(IDE)
소스코드를 만들 때, 우리가 한글 등 언어를 입력하면 이미 그려놓은 폰트를 메모리에서 읽어서 모니터에 뿌린다.

윈도우즈에서는 실행프로그램을 윈도우즈 기계어로 바꾼다. 컴파일러는 어떤 하드웨어나 오에스에 따라 번역한다. 자바는 아님.

요즘 같은 여러개의 사용자와 프로그램이 동시에 실행되기 위해서는 운영체제가 있는 것이 좋다. 멀티 태스킹, 멀티 유저가 개입되는 순간 한정적인 자원(컴퓨터)을 관리하는 관리자가 있어야한다. (공용으로 쓰는 것)

운영체제는 여러 명의 사용자와 프로세스, 데이터를 동시에 실행시킬 수 있게 해주는 관리자이다.

유저 프로세스를 만들려면 하드웨어와 오에스가 알아 들을 수 있도록 해야하는데 자바는 어디서든 쓸 수 있도록 자바 버츄얼 머신을 만들었다.

------

과제 - 입력한 값 모니터에 출력하는 것, 어떠한 비정상적 글자가 입력되면 종료.

정상적인 언어와 제어하는 언어가 다르다. 명령어가 2개의 종류로 나뉜다.
