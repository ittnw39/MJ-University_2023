0524 절차프

이론적 내용 진행

지난시간- 요구사항 정리

요구사항 먼저 나오고 분석, 설계해야 함.

지금은 거꾸로 하는중. 설계 후 분석.

플립드 러닝 - 거꾸로.

소프트웨어 개발 프로세스 - 5단계
요구사항 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트

ㄴ 여러개로 나눠서하고 있음.

워터풀 스타일 -  모든 요구사항을 다 정리해서 설계해서 한번에 구현.

이터랙티브 스타일

애자일 프로세스 - 하나의 백로그씩 해결해나가는것. 체계적으로 하려면 여러사람이 해야하고, 포멀한 문서가 있어야 한다.

단계 5개는 여러번하거나 반복적으로 할 수 있다.

피드백 루프 - 플랜, 두, 씨- 계획을 짜고 실행한 뒤 검토하는 것의 반복

요구사항은 고객, 사용자의 관점.

설계는 개발자의 관점

분석 - 도매인 엑스퍼트(업무적 전문가) - 업무의 관점 - 요구사항이 업무적으로 어떻게 구성해야하는지, 어떤 업무를 해야하는 지에 대한 것임.
분석은 사용자, 도메인 엑스퍼트(해당 영역의 업무), 디자이너-  요구가 어떻게 업무로 구성되는지 정리

설계는 디자이너 관점

구현은 개발자 관점

테스트 -퀄리티 매니저(품질 부서) - 공장이나 제품을 만들거나 서비스를 하는 회사에 다 있다. 품질 보증 부서 QA 부서 - 제 3자가 테스트를 한다.
 - 단위 테스트는 개발자가 한다.

물리적인 사람이 아니라 역할을 말하는 것이다. - 개발자, 디자이너, 등등..

require specific - 요구사항 구체화

고객은 시스템을 서비스 제공자로 본다.

공리 = 정의 = 증명을 안하는 것, 상식, 기본적인 재료 = 이를 가지고 규칙을 만든다.

시스템은 여러개의 원소가 모여 상호작용을 하는 것이다.

시스템은 일반적으로 인위적이고 , 하나이상의 무너가가 모여서 목적을 가지고 움직이고, 무언가를 제공하는 것이다.

시스템의 확장적 개념 - 우주, 자연계..

시스템이 존재한다는 것은 우리가 뭔가를 만들었다는 것이고 그것은 나에게 뭔가를 제공해준다. 이를 서비스 또는 기능, 함수가 있다.

시스템은 입력이 들어가면 반환을 한다. - 살아있는 것은 모두 이런 개념을 가지고 있다. 이를 능동적으로 하면 생물, 수동적으로 하면 무생물이다.

함수는 일정한 규칙에 따라 하나의 집합에 있는 원소가 다른 집합의 원소에 대응하는 것이다.

대응 규칙을 만들어 놓은 것이 함수. 규칙은 여러개의 원소에 적용되어야 한다. 제약조건은 확정적 결과를 가지는 것이다. 관계도 규칙이다. 

계산 상의 복잡도- 너무 복잡해지면 예측이 되지 않는다. 불확정성의 원리.

현재 = 정의역 / 예측, 미래 = 치역

과제 ---- 집합이 뭔지 조사하기, 불확정성의 원리.

사람이 지능을 써서(생각을 해서) 예측을 한다. 행위가 일어날지에 대한 규칙을 파악해서 예측을 한다.

생각의 가장 큰 본질은 예측을 해서 생존을 준비 하는 것 = 재사용에 대한 생각을 가지고 규칙을 가지고 있어야한다. = 함수

main 이 가장 큰 함수

main이 많은 함수로 구성되어 있다. - 함수의 집합의 관점에서 보는 것이다.

함수가 여러개의 작은 함수로 뜯어지는 구조 - 엣날의 프로그램 짜는 방식 -  규칙만 얘기하고 데이터를 고려하지 않음.

데이터 뷰 / 함수 뷰 - 정의역에서 보느냐, 치역에서 보느냐의 차이
fx = x+1;

데이터 플로우 다이어그램 DFD

데이터 플로우는 함수의 대응 규칙을 표현하는 것. 함수적 관점으로 설계하면 DFD를 그림.

내부가 함수호출로 이루어져있다.

지능이라는 것은 우리의 생각을 어떻게 표현하고, 어떻게 일반화 시키고 규칙화 시킬 수 있느냐에 대한 것이다.

프로그램은 고객의 생각을 일반화 시켜서 규칙화 시키는 것이다.

함수는 행위, 시간에대한 규칙. 뭔가 바뀌는 것. 행위는 시간에서 주체가 있어서 반환하는 것이다.

함수는 변화와 이해에 관한 것이다. 인스턴스와 타입

int = int를 만드는 타입

행위적 규칙은 바꾸는 규칙.

클래스, 함수는 다 타입. 인스턴스를 만들어낼 수 있다.

함수는 호출될 때 인스턴스가 만들어낸다. = 메모리가 생성된다. 함수가 끝나면 메모리에서 없어짐.

실체 - 함수와 객체의 관점이 있다.

객체는 지속적이고 값이 있다.

------------------여기까지 함수적 관점

객체는 함수개념보다 데이터의 개념이 더 중요하다, 함수의 집합을 객체화 시키는 경우도 있다.

동사를 명사화 시킨것이 컨트롤이다. 컨트롤은 데이터를 가지고 있지 않고 그냥 함수의 집합이다.

상태(현재)는 형용사. 이는 명사가 가진 속성의 값의 집합을 말한다.

속성(필드)안에 값이 채워질 때를 상태라고 한다.

상태는 특정 시점에 어떤 객체의 속성 값의 집합을 말한다. 값에 따라 상태가 나뉜다.

속성과 상태는 직결되어 있고 형용사가 있다.

-------부사

부사는 동사가 어떻게 실행되어야 하는 것이다.

동사는 함수, 변화에 관한 이야기. 주체가 어떻게 변하느냐에 대한 것이다.

동사는 행위에 관한 것이고 주체가 있어야한다.

동사의 구체적인 것을 제약하는 것이다. 어떻게 변화해야하는지에 대한 것이다.

부사는 규칙이 실행되는 방법을 제약하는 역할을 한다.

동사를 제약하는 것을 품질이라고 한다. 품질은 프로그램이 실행될 때 어떻게 실행될지에 대한 것이다.
효율적으로, 빠르게, 느리게, 안전하게...

실행되는데에 대한 제약조건을 품질이라고 한다.

ISO25010

품질이라는 것은 무언가를 실행할 때 어떻게 실행되냐에 관한 것.

고객은 생각을 자연어로 말하고, 이를 해석해서 컴퓨터 언어로 옮겨야 한다.

뛰어난 엔지니어는 예측해서 설계한다.

구조가 만들어지지 않으면 처음부터 다시 만들어야한다.

------------ 객체 지향 - 데이터를 중심으로

우리는 기능적 관점으로 구현함.
 

